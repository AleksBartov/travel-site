{"version":3,"sources":["components/Game.js","components/Card.js","constants/constants.js","App.js","serviceWorker.js","index.js"],"names":["Game","children","className","Card","direction","module","active","start","track","end","x","y","value","CARD_WIDTH","gap","moveHandler","useState","coords","setCoords","box","useRef","useEffect","ref","onTouchStart","e","current","firstChild","classList","add","touches","pageX","pageY","preventDefault","onTouchMove","changedTouches","style","transform","onTouchEnd","remove","CONSTANTS","NUM_OF_CARDS","PERIOD","App","cards","setCards","setGap","card","oldCoords","newCoords","oX","oY","nX","nY","myIndex","findIndex","myArr","Array","fill","reduce","arr","index","concat","map","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bc5766b4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Game({ children }) {\r\n    return (\r\n        <div className=\"Game\">\r\n            {children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\n\r\n\r\nfunction Card({ x, y, value, CARD_WIDTH, gap, moveHandler }) {\r\n\r\n    const [coords, setCoords] = useState({ x: 0, y: 0 });\r\n\r\n    const box = useRef(null)\r\n    let direction, module, active; // определяем ось координат движения и модуль ( минус или плюс)\r\n\r\n    useEffect(() => {\r\n        if (x === gap.x && y < gap.y) {\r\n            direction = 'Y';\r\n            module = true;\r\n            active = true;\r\n        } else if (x === gap.x && y > gap.y) {\r\n            direction = 'Y';\r\n            module = false;\r\n            active = true;\r\n        } else if (y === gap.y && x < gap.x) {\r\n            direction = 'X';\r\n            module = true;\r\n            active = true;\r\n        } else if (y === gap.y && x > gap.x) {\r\n            direction = 'X';\r\n            module = false;\r\n            active = true;\r\n        }\r\n    }, [gap])\r\n\r\n    let start, track, end;\r\n\r\n    function touchStart(e) {\r\n        box.current.firstChild.classList.add('shadowDown')\r\n        if (active) {\r\n            start = direction === 'X' ? e.touches[0].pageX : e.touches[0].pageY;\r\n        }\r\n        e.preventDefault();\r\n        return\r\n    }\r\n\r\n    function touchMove(e) {\r\n        if (active) {\r\n            track = (direction === 'X' ? e.changedTouches[0].pageX : e.changedTouches[0].pageY) - start;\r\n            if (!module && track > 0) {\r\n                track = 0\r\n            } else if (!module && track < -CARD_WIDTH) {\r\n                track = -CARD_WIDTH\r\n            } else if (module && track < 0) {\r\n                track = 0\r\n            } else if (module && track > CARD_WIDTH) {\r\n                track = CARD_WIDTH\r\n            }\r\n            box.current.style.transform = `translate${direction}(${track + coords.y}px)`\r\n        }\r\n        e.preventDefault();\r\n        return\r\n    }\r\n\r\n    function touchEnd(e) {\r\n        box.current.firstChild.classList.remove('shadowDown')\r\n        if (active) {\r\n            if (!module) {\r\n                end = track < -CARD_WIDTH / 2 ? -CARD_WIDTH : 0\r\n            } else {\r\n                end = track > CARD_WIDTH / 2 ? CARD_WIDTH : 0\r\n            }\r\n\r\n            box.current.style.transform = `translate${direction}(${end + coords.y}px)`\r\n            moveHandler(value, { x, y }, {\r\n                x: direction === 'Y' ? x : end === 0 ? x : module ? x + 1 : x - 1,\r\n                y: direction === 'X' ? y : end === 0 ? y : module ? y + 1 : y - 1\r\n            });\r\n            setCoords(({ x, y }) => {\r\n                return {\r\n                    x: direction === 'X' ? end : x,\r\n                    y: direction === 'Y' ? end : y\r\n                }\r\n            });\r\n        }\r\n        e.preventDefault();\r\n        return\r\n    }\r\n\r\n    return (\r\n        <div ref={box} onTouchStart={touchStart} onTouchMove={touchMove} onTouchEnd={touchEnd}\r\n            className={`Card ${value === 16 ? 'empty' : ''}`}>\r\n            <div className=\"number\">{value}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","export const CONSTANTS = {\r\n    NUM_OF_CARDS: 16,\r\n    CARD_WIDTH: 69,\r\n    PERIOD: 4,\r\n}","import React, { useState, useEffect } from 'react';\nimport Game from './components/Game'\nimport Card from './components/Card'\nimport { CONSTANTS } from './constants/constants'\nimport './App.css';\n\nconst { NUM_OF_CARDS, CARD_WIDTH, PERIOD } = CONSTANTS\n\nfunction App() {\n\n  const [cards, setCards] = useState([]);\n  const [gap, setGap] = useState({ x: null, y: null })\n\n  useEffect(() => {\n    let x = 0, y = 0;\n\n    let myArr = new Array(NUM_OF_CARDS)\n      .fill(\n        null\n      )\n      .reduce((arr, card, index) => {\n        index % PERIOD !== 0 ? x++ : x = 0\n        index % PERIOD !== 0 ? y = y : y++\n\n        return [...arr, { value: index + 1, x, y: y - 1 }]\n      }, [])\n\n    setCards(cards.concat(myArr));\n    setGap({ x: PERIOD - 1, y: PERIOD - 1 });\n  }, [])\n\n  function moveHandler(card, oldCoords, newCoords) {\n    const { x: oX, y: oY } = oldCoords\n    const { x: nX, y: nY } = newCoords\n\n    if (oX !== nX || oY !== nY) {\n      setGap(({ x, y }) => {\n        return {\n          x: oldCoords.x,\n          y: oldCoords.y,\n        }\n      });\n\n      setCards((cards) => {\n        const myIndex = cards.findIndex(x => {\n          return x.value === card\n        })\n        cards[myIndex].x = nX;\n        cards[myIndex].y = nY;\n\n        return cards\n      });\n\n      return\n    }\n    return\n  }\n\n\n  return (\n    <div className=\"App\">\n      <Game>\n        {cards.map(({ value, x, y, active }, index) => {\n          return <Card key={index} {...{ x, y, value, CARD_WIDTH, gap, moveHandler }} />\n        })}\n      </Game>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}